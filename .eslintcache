[{"/Users/florianbauer/code/quickstart-react/src/App.js":"1","/Users/florianbauer/code/quickstart-react/src/components/Sidebar/Sidebar.js":"2","/Users/florianbauer/code/quickstart-react/src/components/PersonThumb/PersonThumb.js":"3","/Users/florianbauer/code/quickstart-react/src/index.js":"4","/Users/florianbauer/code/quickstart-react/src/helper/MondayChatDataLayer.js":"5","/Users/florianbauer/code/quickstart-react/src/components/MessageWindow/MessageWindow.js":"6"},{"size":5165,"mtime":1606684289416,"results":"7","hashOfConfig":"8"},{"size":5619,"mtime":1606727219500,"results":"9","hashOfConfig":"8"},{"size":521,"mtime":1606610232475,"results":"10","hashOfConfig":"8"},{"size":168,"mtime":1606441864707,"results":"11","hashOfConfig":"8"},{"size":8900,"mtime":1606727410672,"results":"12","hashOfConfig":"8"},{"size":1719,"mtime":1606727059447,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"jm1bxx",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/florianbauer/code/quickstart-react/src/App.js",["28"],"import React, { useState, useEffect } from \"react\";\n\nimport Sidebar from \"components/Sidebar/Sidebar\";\nimport MessageWindow from \"components/MessageWindow/MessageWindow\";\nimport ChatWindow from \"components/ChatWindow/ChatWindow\";\n\nimport MondayChatDataLayer from \"helper/MondayChatDataLayer\";\nimport { useLocalStorage } from \"helper/hooks\";\n\nimport \"monday-ui-react-core/dist/main.css\";\nimport styles from \"App.module.css\";\n\nconst mdl = new MondayChatDataLayer();\n\nexport default function () {\n  const [context, setContext] = useState({});\n  const [itemId, setItemId] = useState();\n\n  // user specifics\n  const [currentUser, setCurrentUser] = useState();\n  const [allUsers, setAllUsers] = useState();\n\n  // Chat listing in sidebar\n  const [activeChats, setActiveChats] = useState([]);\n  const [listedChats, setListedChats] = useState([]);\n\n  // Chat Partner specifics\n  const [activeUserId, setActiveUserId] = useLocalStorage(\"activeUserId\", null);\n  const [activeMessages, setActiveMessages] = useState([]);\n\n  /**\n   *\n   * First Actions are getting context, get loggedin user\n   * and recieve all Users for autocomplete, User Information\n   *\n   */\n\n  useEffect(() => {\n    const contextChanger = (res) => {\n      if (res.type === \"context\") {\n        setContext(res.data);\n      } else {\n        setItemId(res.data.itemId);\n      }\n    };\n    // get the context\n    mdl.listenToChanges(contextChanger);\n    // get all Users + current User\n    mdl.getUserAndAllUsers().then((res) => {\n      // we set the loggedin user\n      setCurrentUser(res.data.me);\n      // and all users\n      setAllUsers(res.data.users);\n    });\n  }, []);\n\n  /**\n   *\n   * Next up if we have the loggedin User we load the active\n   * Chats as well as starting the Update Timer when messages\n   * are incoming.\n   *\n   * It only updates all 12 seconds to be nice to the API,\n   * can be faster but I think thats alright.\n   *\n   */\n  useEffect(() => {\n    if (currentUser && currentUser.id) {\n      loadActiveChatsHandler(currentUser.id);\n    }\n    // we don't need to hurry for this list\n    const interval = setInterval(() => {\n      loadActiveChatsHandler(currentUser.id);\n    }, 6000);\n\n    return () => clearInterval(interval);\n  }, [currentUser]);\n\n  /**\n   *\n   * Next up we load the messages of the active Chat window we\n   * have open and start the Update Timer for this window.\n   *\n   * Here we load every 6th second, because messages should return quicker.\n   *\n   */\n  useEffect(() => {\n    if (activeUserId && currentUser && currentUser.id) {\n      mdl\n        .loadMessages(currentUser.id, activeUserId)\n        .then((response) => setActiveMessages(response));\n    }\n    // here we are little faster\n    const interval = setInterval(() => {\n      mdl\n        .loadMessages(currentUser.id, activeUserId)\n        .then((response) => setActiveMessages(response));\n    }, 6000);\n\n    return () => clearInterval(interval);\n  }, [activeUserId, currentUser]);\n\n  /**\n   *\n   * Function to load active Chats\n   *\n   */\n  const loadActiveChatsHandler = async (userId, searchTerm) => {\n    const chatsArray = await mdl.loadActiveChats(userId);\n    // put messages into state\n    setActiveChats(chatsArray);\n\n    if (searchTerm === \"\") {\n      setListedChats(chatsArray);\n    }\n  };\n\n  /**\n   *\n   * Function to send Message\n   *\n   */\n  const sendMessageHandler = (currentUserId, activeUserId, text) => {\n    if (text) {\n      mdl\n        .sendMessage({\n          currentUserId,\n          activeUserId,\n          messageText: text,\n          setActiveChats,\n        })\n        .then((resp) => setActiveMessages(resp));\n    }\n  };\n  /**\n   *\n   * Function to make a Chat read (after clicking on it)\n   *\n   */\n  const makeUnreadHandler = (userId) => {\n    mdl\n      .toggleChannelUnread({\n        currentUserId: currentUser.id,\n        userId: userId,\n      })\n      .then((res) => {\n        loadActiveChatsHandler(currentUser.id);\n      });\n  };\n  /**\n   *\n   * Function to mute channel\n   *\n   */\n  const toggleMuteHandle = (userId) => {\n    mdl\n      .toggleMuteChannel({\n        currentUserId: currentUser.id,\n        userId: userId,\n      })\n      .then((res) => {\n        loadActiveChatsHandler(currentUser.id);\n      });\n  };\n\n  /**\n   *\n   * Finally Render\n   *\n   */\n  return (\n    <div className={`${styles.App} ${context.theme !== \"light\" && \"dark\"}`}>\n      <div className={styles.sidebar}>\n        <Sidebar\n          activeChats={activeChats}\n          listedChats={listedChats}\n          setListedChats={setListedChats}\n          allUsers={allUsers}\n          activeUserId={activeUserId}\n          setActiveUserId={setActiveUserId}\n          makeUnread={makeUnreadHandler}\n          toggleMute={toggleMuteHandle}\n        />\n      </div>\n      <div className={styles.main}>\n        <MessageWindow\n          activeUserId={activeUserId}\n          messages={activeMessages}\n          allUsers={allUsers}\n        />\n        {currentUser && (\n          <ChatWindow\n            sendMessage={sendMessageHandler}\n            currentUserId={currentUser.id}\n            activeUserId={activeUserId}\n            itemId={itemId}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","/Users/florianbauer/code/quickstart-react/src/components/Sidebar/Sidebar.js",["29"],"import React, { useState, useEffect } from \"react\";\nimport { Search } from \"monday-ui-react-core\";\nimport Invite from \"monday-ui-react-core/dist/icons/Invite\";\nimport Show from \"monday-ui-react-core/dist/icons/Show\";\nimport Hide from \"monday-ui-react-core/dist/icons/Hide\";\n\nimport Person from \"components/Person/Person\";\nimport { useLocalStorage } from \"helper/hooks\";\n\nimport styles from \"./Sidebar.module.css\";\nimport conersationStarter from \"./conversation_starter.json\";\n\nexport default function ({\n  allUsers,\n  activeChats,\n  listedChats,\n  setListedChats,\n  activeUserId,\n  setActiveUserId,\n  makeUnread,\n  toggleMute,\n}) {\n  const [search, setSearch] = useState();\n\n  const [conversation, setConversation] = useState();\n  const [\n    showConversationStarters,\n    setShowConversationStarters,\n  ] = useLocalStorage(\"show_conversation_starters\", true);\n\n  // you search for all users\n  const handleSearch = (activeChats, searchTerm) => {\n    setSearch(searchTerm);\n    if (!searchTerm) {\n      return setListedChats(activeChats);\n    }\n\n    const possibleChatPartner = allUsers\n      .filter((user) => user.name.includes(searchTerm))\n      .map((user) => ({ userId: user.id }));\n\n    setListedChats(possibleChatPartner);\n  };\n\n  // when user clicks on user\n  const selectChatHandler = (userObj, e) => {\n    // check if menu was clicked\n    const tag = e.target.tagName;\n    const tagArray = [\"svg\", \"path\", \"button\"];\n    if (tagArray.includes(tag)) {\n      return;\n    }\n\n    if (userObj.type === \"unread\") {\n      // we have to remove it from the unread list\n      makeUnread(userObj.userId);\n    }\n\n    // we set is as active Chat (window changes)\n    setActiveUserId(userObj.userId);\n  };\n\n  useEffect(() => {\n    const randomConversation =\n      conersationStarter[Math.floor(Math.random() * conersationStarter.length)];\n    setConversation(randomConversation);\n  }, []);\n\n  useEffect(() => {\n    if (\n      !search &&\n      JSON.stringify(activeChats) !== JSON.stringify(listedChats)\n    ) {\n      setListedChats(activeChats);\n    }\n  }, [activeChats, listedChats, search, setListedChats]);\n\n  // sort the Chats\n\n  let listedChatsSorted = [];\n  console.log(listedChats);\n  if (listedChats) {\n    listedChatsSorted = listedChats.sort(\n      (a, b) => b.last_seen_at - a.last_seen_at\n    );\n  }\n\n  if (!allUsers) {\n    return <div className={styles.sidebar}></div>;\n  }\n\n  return (\n    <div className={styles.sidebar}>\n      <Search\n        iconName=\"icon-v2-search\"\n        onChange={(searchTerm) => handleSearch(activeChats, searchTerm)}\n        placeholder=\"Enter Name\"\n      />\n      <nav className={styles.userlist}>\n        {search && listedChatsSorted && listedChatsSorted.length === 0 && (\n          <div className={styles.notification}>\n            <p>\n              Oh no, we couldn't find a user for <strong>{search}</strong>...\n            </p>\n            <p className={styles.background}>\n              You can also invite a new person by clicking on the <Invite />{\" \"}\n              Icon on bottom left.\n            </p>\n          </div>\n        )}\n        {!search && listedChatsSorted && listedChatsSorted.length === 0 && (\n          <div className={styles.notification}>\n            <p>You don't have any active Chats yet.</p>\n            <p className={`${styles.left}`}>\n              <strong>Maybe talk to your latest team members?</strong>\n            </p>\n            {allUsers &&\n              allUsers\n                .sort((a, b) => a.join_date - b.join_date)\n                .slice(0, 3)\n                .map((user) => {\n                  const userObj = { userId: user.id };\n                  return (\n                    <Person\n                      key={userObj.userId}\n                      userObj={userObj}\n                      activeUserId={activeUserId}\n                      allUsers={allUsers}\n                      selectChatHandler={selectChatHandler}\n                      toggleMuteHandle={!search ? toggleMute : undefined}\n                    />\n                  );\n                })}\n          </div>\n        )}\n        <div>\n          {listedChatsSorted &&\n            listedChatsSorted.map((userObj) => {\n              return (\n                <Person\n                  key={userObj.userId}\n                  userObj={userObj}\n                  activeUserId={activeUserId}\n                  allUsers={allUsers}\n                  selectChatHandler={selectChatHandler}\n                  toggleMuteHandle={!search ? toggleMute : undefined}\n                />\n              );\n            })}\n        </div>\n        {showConversationStarters && (\n          <div className={styles.notification}>\n            <p className={styles.notHeader}>\n              You are not sure what to say? How about{\" \"}\n              <Hide onClick={() => setShowConversationStarters(false)} />\n            </p>\n            <p className={`${styles.background} ${styles.left}`}>\n              <strong>{conversation.question}</strong>\n              <br />\n              {conversation.info}\n            </p>\n            <small>\n              source{\" \"}\n              <a\n                href=\"https://conversationstartersworld.com/250-conversation-starters/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\">\n                conversationstartersworld.com\n              </a>\n            </small>\n          </div>\n        )}\n        {!showConversationStarters && (\n          <div className={`${styles.notification} ${styles.right}`}>\n            <Show onClick={() => setShowConversationStarters(true)} />\n          </div>\n        )}\n      </nav>\n    </div>\n  );\n}\n","/Users/florianbauer/code/quickstart-react/src/components/PersonThumb/PersonThumb.js",["30"],"/Users/florianbauer/code/quickstart-react/src/index.js",[],"/Users/florianbauer/code/quickstart-react/src/helper/MondayChatDataLayer.js",[],"/Users/florianbauer/code/quickstart-react/src/components/MessageWindow/MessageWindow.js",["31"],{"ruleId":"32","severity":1,"message":"33","line":15,"column":1,"nodeType":"34","endLine":202,"endColumn":2},{"ruleId":"32","severity":1,"message":"33","line":13,"column":1,"nodeType":"34","endLine":181,"endColumn":2},{"ruleId":"32","severity":1,"message":"33","line":6,"column":1,"nodeType":"34","endLine":23,"endColumn":2},{"ruleId":"32","severity":1,"message":"33","line":10,"column":1,"nodeType":"34","endLine":58,"endColumn":2},"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration"]